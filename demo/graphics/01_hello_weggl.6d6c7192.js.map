{"version":3,"sources":["01_hello_weggl/index.js"],"names":["canvas","document","querySelector","gl","getContext","vertex","fragment","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","createCircleVertex","x","y","r","n","sin","Math","cos","perAngel","PI","positionArray","i","angel","nx","ny","push","Float32Array","create2CircleVertex","R","Rx","Ry","rx","ry","attachShader","linkProgram","useProgram","points","bufferId","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vPosition","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","clear","COLOR_BUFFER_BIT","drawArrays","TRIANGLE_FAN","length"],"mappings":";AACA,IAAMA,EAASC,SAASC,cAAc,UAChCC,EAAKH,EAAOI,WAAW,SAIvBC,EAAN,wMAWMC,EAAN,2HAUMC,EAAeJ,EAAGK,aAAaL,EAAGM,eACxCN,EAAGO,aAAaH,EAAcF,GAC9BF,EAAGQ,cAAcJ,GAGjB,IAAMK,EAAiBT,EAAGK,aAAaL,EAAGU,iBAC1CV,EAAGO,aAAaE,EAAgBN,GAChCH,EAAGQ,cAAcC,GAGjB,IAAME,EAAUX,EAAGY,gBAgBnB,SAASC,EAAmBC,EAAGC,EAAGC,EAAGC,GAK9B,IAJCC,IAAAA,EAAMC,KAAKD,IACXE,EAAMD,KAAKC,IACXC,EAAY,EAAIF,KAAKG,GAAML,EAC3BM,EAAgB,GACbC,EAAI,EAAGA,EAAIP,EAAGO,IAAK,CAClBC,IAAAA,EAAQD,EAAIH,EACZK,EAAKZ,EAAIE,EAAII,EAAIK,GACjBE,EAAKZ,EAAIC,EAAIE,EAAIO,GACvBF,EAAcK,KAAKF,EAAIC,GAEpB,OAAA,IAAIE,aAAaN,GAG1B,SAASO,EAAoBhB,EAAGC,EAAGC,EAAGe,EAAGd,GAKhC,IAJCC,IAAAA,EAAMC,KAAKD,IACXE,EAAMD,KAAKC,IACXC,EAAWF,KAAKG,GAAKL,EACrBM,EAAgB,GACbC,EAAI,EAAGA,EAAI,EAAIP,EAAGO,IAAK,CACtBC,IAAAA,EAAQD,EAAIH,EACdG,GAAAA,EAAI,GAAM,EAAG,CACPQ,IAAAA,EAAKlB,EAAIiB,EAAIX,EAAIK,GACjBQ,EAAKlB,EAAIgB,EAAIb,EAAIO,GACvBF,EAAcK,KAAKI,EAAIC,OACpB,CACGC,IAAAA,EAAKpB,EAAIE,EAAII,EAAIK,GACjBU,EAAKpB,EAAIC,EAAIE,EAAIO,GACvBF,EAAcK,KAAKM,EAAIC,IAGxB,OAAA,IAAIN,aAAaN,GA9C5BvB,EAAGoC,aAAazB,EAASP,GACzBJ,EAAGoC,aAAazB,EAASF,GACzBT,EAAGqC,YAAY1B,GACfX,EAAGsC,WAAW3B,GA8Cd,IAAM4B,EAAST,EAAoB,EAAG,EAAG,EAAG,EAAG,GAEzCU,EAAWxC,EAAGyC,eACpBzC,EAAG0C,WAAW1C,EAAG2C,aAAcH,GAC/BxC,EAAG4C,WAAW5C,EAAG2C,aAAcJ,EAAQvC,EAAG6C,aAE1C,IAAMC,EAAY9C,EAAG+C,kBAAkBpC,EAAS,YAChDX,EAAGgD,oBAAoBF,EAAW,EAAG9C,EAAGiD,OAAO,EAAO,EAAG,GACzDjD,EAAGkD,wBAAwBJ,GAE3B9C,EAAGmD,MAAMnD,EAAGoD,kBACZpD,EAAGqD,WAAWrD,EAAGsD,aAAc,EAAGf,EAAOgB,OAAS","file":"01_hello_weggl.6d6c7192.js","sourceRoot":"..","sourcesContent":["\nconst canvas = document.querySelector('canvas');\nconst gl = canvas.getContext('webgl');\n\n// 创建 webgl 程序\n// 顶点着色器\nconst vertex = `\n  attribute vec2 position;\n  varying vec3 color;\n  void main() {\n    gl_PointSize = 1.0;\n    color = vec3(0.5 + position * 0.5, 0.0);\n    gl_Position = vec4(position * 0.5, 1.0, 1.0);\n  }\n`;\n\n// 片元着色器\nconst fragment = `\n  precision mediump float;\n  varying vec3 color;\n  void main()\n  {\n    gl_FragColor = vec4(color, 1.0);\n  }    \n`;\n\n// 创建顶点着色器 shader 对象\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vertexShader, vertex);\ngl.compileShader(vertexShader);\n\n// 创建片元着色器 shader 对象\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fragmentShader, fragment);\ngl.compileShader(fragmentShader);\n\n// 创建 webglProgram 对象\nconst program = gl.createProgram();\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\ngl.linkProgram(program);\ngl.useProgram(program);\n\n// const points = new Float32Array([\n//   0, 0,\n//   1, -1,\n//   1, 1,\n//   -1, 1,\n//   -1,-1,\n//   1,-1,\n// ]);\n\n// 多边形顶点坐标函数\nfunction createCircleVertex(x, y, r, n) {\n  const sin = Math.sin;\n  const cos = Math.cos;\n  const perAngel = (2 * Math.PI) / n;\n  const positionArray = [];\n  for (let i = 0; i < n; i++) {\n      const angel = i * perAngel;\n      const nx = x + r * cos(angel);\n      const ny = y + r * sin(angel);\n      positionArray.push(nx, ny);\n  }\n  return new Float32Array(positionArray);\n}\n// 正多角星坐标函数\nfunction create2CircleVertex(x, y, r, R, n) {\n    const sin = Math.sin;\n    const cos = Math.cos;\n    const perAngel = Math.PI / n;\n    const positionArray = [];\n    for (let i = 0; i < 2 * n; i++) {\n        const angel = i * perAngel;\n        if (i % 2 !== 0) {\n            const Rx = x + R * cos(angel);\n            const Ry = y + R * sin(angel);\n            positionArray.push(Rx, Ry);\n        } else {\n            const rx = x + r * cos(angel);\n            const ry = y + r * sin(angel);\n            positionArray.push(rx, ry);\n        }\n    }\n    return new Float32Array(positionArray);\n}\n\nconst points = create2CircleVertex(0, 0, 1, 2, 5);\n\nconst bufferId = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, bufferId);\ngl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n\nconst vPosition = gl.getAttribLocation(program, 'position');\ngl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(vPosition);\n\ngl.clear(gl.COLOR_BUFFER_BIT);\ngl.drawArrays(gl.TRIANGLE_FAN, 0, points.length / 2);"]}