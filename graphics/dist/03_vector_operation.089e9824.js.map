{"version":3,"sources":["common/lib/vector2d.js","03_vector_operation/index.js"],"names":["Vector2D","x","y","v","a","scale","length","rad","c","Math","cos","s","sin","hypot","atan2","$","el","document","querySelector","$$","querySelectorAll","Canvas","canvas","axis","size","dash","color","ctx","getContext","width","translate","strokeStyle","drawAxis","window","mouseBinded","addEventListener","e","rect","getBoundingClientRect","clientX","left","clientY","top","height","clearRect","point","find","checked","value","coordinates","innerHTML","dist","slice","O","line","text","filled","font","fillText","strokeText","A","B","dashed","p","forEach","P","lineSeg","x1","y1","x2","y2","beginPath","moveTo","lineTo","setLineDash","stroke","r","ellipse","PI","fill","name","circle","x0","y0","seg","Q","R","QR","copy","sub","QP","RP","N","PN","cross","dotProduct","dot"],"mappings":"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","file":"03_vector_operation.089e9824.js","sourceRoot":"..","sourcesContent":["export class Vector2D {\r\n    constructor(x = 1, y = 0) {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n\r\n    get length() {\r\n      return Math.hypot(this.x, this.y);\r\n    }\r\n  \r\n    get dir() {\r\n      return Math.atan2(this.y, this.x);\r\n    }\r\n  \r\n    copy() {\r\n      return new Vector2D(this.x, this.y);\r\n    }\r\n  \r\n    add(v) {\r\n      this.x += v.x;\r\n      this.y += v.y;\r\n      return this;\r\n    }\r\n  \r\n    sub(v) {\r\n      debugger\r\n      this.x -= v.x;\r\n      this.y -= v.y;\r\n      return this;\r\n    }\r\n  \r\n    scale(a) {\r\n      this.x *= a;\r\n      this.y *= a;\r\n      return this;\r\n    }\r\n  \r\n    cross(v) {\r\n      return this.x * v.y - v.x * this.y;\r\n    }\r\n  \r\n    dot(v) {\r\n      return this.x * v.x + v.y * this.y;\r\n    }\r\n  \r\n    normalize() {\r\n      return this.scale(1 / this.length);\r\n    }\r\n  \r\n    rotate(rad) {\r\n      const c = Math.cos(rad),\r\n        s = Math.sin(rad);\r\n      const [x, y] = this;\r\n  \r\n      this.x = x * c + y * -s;\r\n      this.y = x * s + y * c;\r\n  \r\n      return this;\r\n    }\r\n  }","import { Vector2D } from '../common/lib/vector2d';\nconst $ = el => document.querySelector(el)\nconst $$ = el => document.querySelectorAll(el)\n\nclass Canvas {\n  constructor (canvas, { axis = true, size, dash = 8, color = 'black' } = {}) {\n    const ctx = this.ctx = canvas.getContext('2d')\n    if (!size) size = 512\n    this.size = size\n    this.dash = dash\n    this.color = color\n    const scale = this.scale = canvas.width / size\n    ctx.scale(scale, -scale)\n    ctx.translate(size / 2, -size / 2)\n    ctx.strokeStyle = color\n    if (axis) this.drawAxis ()\n    if (!window.mouseBinded) canvas.addEventListener('mousemove', e => {\n      window.mouseBinded = true\n      const rect = canvas.getBoundingClientRect()\n      const x = (e.clientX - rect.left) * (canvas.width / rect.width) / scale - size / 2\n      const y = size / 2 - (e.clientY - rect.top) * (canvas.height / rect.height) / scale\n      ctx.clearRect(-size / 2, -size / 2, size, size)\n      const point = [...$$('[name=point]')].find(x => x.checked).value\n      if (point === 'P') {\n        coordinates[0] = x\n        coordinates[1] = y\n      } else if (point === 'Q') {\n        coordinates[2] = x\n        coordinates[3] = y\n      } else {\n        coordinates[4] = x\n        coordinates[5] = y\n      }\n      if (axis) this.drawAxis ()\n      $('#dist1').innerHTML = dist(...coordinates, true)\n      $('#dist2').innerHTML = dist(...coordinates)\n      $('#P').innerHTML = coordinates.slice(0, 2)\n      $('#Q').innerHTML = coordinates.slice(2, 4)\n      $('#R').innerHTML = coordinates.slice(4)\n    })\n  }\n  drawAxis () {\n    const { ctx, size, dash } = this\n    const O = {x: 0, y: 0}\n    const X = {x: 1, y: 0}\n    const Y = {x: 0, y: 1}\n    this.line(O, X, true)\n    this.line(O, Y, true)\n    this.point(O, 'O')\n  }\n  text (x, y, text, filled = false) {\n    const { ctx } = this\n    ctx.scale(1, -1)\n    ctx.font = `16px serif`\n    filled ? ctx.fillText(text, x, -y) : ctx.strokeText(text, x, -y)\n    ctx.scale(1, -1)\n  }\n  // 通过两点画坐标轴内的直线\n  line (A, B, dashed = false, color) {\n    if (A.x === B.x && A.y === B.y) return\n    const p = this.size / 2\n    const ends = [\n      { x: A.x + (p - A.y) / (B.y - A.y) * (B.x - A.x), y: p},\n      { x: A.x + (-p - A.y) / (B.y - A.y) * (B.x - A.x), y: -p},\n      { x: p, y: A.y + (p - A.x) / (B.x - A.x) * (B.y - A.y) },\n      { x: -p, y: A.y + (-p - A.x) / (B.x - A.x) * (B.y - A.y) }\n    ]\n    ends.forEach(P => this.lineSeg(A, P, dashed, color))\n  }\n  lineSeg ({x: x1, y: y1}, {x: x2, y: y2}, dashed = false, color) {\n    const { ctx, dash } = this\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    if (dashed) ctx.setLineDash([dash, dash])\n    if (color) ctx.strokeStyle = color\n    ctx.stroke()\n    ctx.setLineDash([])\n    ctx.strokeStyle = this.color\n  }\n  circle (x, y, r, filled = false) {\n    const { ctx } = this\n    ctx.beginPath()\n    ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n    filled ? ctx.fill() : ctx.stroke()\n  }\n  point ({x, y}, name) {\n    this.circle(x, y, 2, true)\n    if (name) this.text(x, y, name, true)\n  }\n}\nconst coordinates = [0, 0, -100, 0, 100, 0]\nconst canvas = new Canvas($('canvas'), { axis: false })\ndist(0, 100, -100, 0, 100, 0, true)\n\nfunction dist (x0, y0, x1, y1, x2, y2, seg = false) {\n  const P = new Vector2D(x0, y0)\n  const Q = new Vector2D(x1, y1)\n  const R = new Vector2D(x2, y2)\n  const QR = R.copy().sub(Q)\n  const QP = P.copy().sub(Q)\n  const RP = P.copy().sub(R)\n  debugger\n//   const PN = new Vector2D(QR.y, -QR.x)\n//   const N = QR.length === 0 ? Q.scale(1) : new Vector2D(\n//     P.x * QR.x ** 2 + Q.x * QR.y ** 2 + QR.x * QR.y * (P.y - Q.y),\n//     P.y * QR.y ** 2 + Q.y * QR.x ** 2 + QR.x * QR.y * (P.x - Q.x)\n//   ).scale(1 / QR.length ** 2)\n  const N = new Vector2D(\n   ((QR.x * QP.x + QR.y * QP.y) / QR.length) * (R.x - Q.x) / QR.length + Q.x,\n   ((QR.x * QP.x + QR.y * QP.y) / QR.length) * (R.y - Q.y) / QR.length + Q.y\n  )\n  const PN = N.copy().sub(P)\n\n  if (!seg) return QP.cross(QR) / QR.length\n  canvas.point(P, 'P')\n  canvas.point(Q, 'Q')\n  canvas.point(R, 'R ')\n  canvas.line(Q, R)\n  canvas.lineSeg(Q, R, false, 'blue')\n  if (QR.length === 0) {\n    canvas.lineSeg(N, P)\n    return QP.length\n  }\n  if (PN.length > 0) canvas.point(N, 'N')\n  const dotProduct = QR.dot(QP) / QR.length\n  if (dotProduct < 0) {\n    canvas.lineSeg(N, P, true, 'green')\n    canvas.lineSeg(P, Q, false, 'red')\n    return QP.length\n  }\n  if (dotProduct > QR.length) {\n    canvas.lineSeg(N, P, true, 'green')\n    canvas.lineSeg(P, R, false, 'red')\n    return RP.length\n  }\n  canvas.lineSeg(P, N, false, 'red')\n  return QP.cross(QR) / QR.length\n}\n\n"]}